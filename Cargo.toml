# Copyright 2024 by Composable Foundation
# Copyright 2025 by Michał Nazarewicz

[package]
name = "solana-allocator"
version = "0.1.0"
description = "A global allocator for Solana programs supporting ≥32 KiB heap sizes and mutable global state."
authors = ["Michal Nazarewicz <mina86@mina86.com>"]
homepage = "https://codeberg.org/mina86/solana-allocator"
license = "GPL-2.0-or-later"
edition = "2024"
readme = "README.md"

[dependencies]
bytemuck = { version = "1.21", default-features = false }

[features]
default = []

# If enabled, poke last byte of the allocation.  Since the allocator
# doesn’t know how big the heap is, if we run out of memory, this is
# a way to force a segfault.
#
# Without this feature, the segfault will happen when user tries to
# use the memory past the heap size.  This is a bit like
# over-committing in Linux behaves where allocations always succeed
# and failure happens only when user writes to a page and Linux fails
# to allocate it.
#
# Disabling this is a µoptimisation which removes a couple of
# instructions from the allocation code at the cost of deferring
# allocation failure errors.
poke = []
